name: build
description: Build the rusty-cli binary

inputs:
  build-mode:
    description: >-
      Cargo build mode. Choose one of `debug` (default) or `release`.
    default: 'debug'
    required: false

runs:
  using: composite
  steps:
    - id: toolchain
      uses: ./.github/actions/setup

    - name: setup environment vars
      id: setup-env
      shell: bash
      env:
        BUILD_HASH: >-
          ${{ hashFiles(
            '**/Cargo.*',
            '**/*.rs',
            './.github/actions/build/**'
          ) }}
        BUILD_MODE: ${{ inputs.build-mode == 'release' && 'release' || 'debug' }}
        RUST_CACHE_KEY: ${{ steps.toolchain.outputs.rust-cache-key }}
      run: |
        : ${RUST_CACHE_KEY:?}
        : ${BUILD_MODE:?} ${BUILD_HASH:?}
        : ${RUNNER_OS:?} ${RUNNER_ARCH:?}

        set-out() { echo "${1}=${2}" >> $GITHUB_OUTPUT; }
        set-env() { echo "${1}=${2}" >> $GITHUB_ENV; }

        BUILD_PREFIX="build-${RUNNER_OS}-${RUNNER_ARCH}-${BUILD_MODE}::rust-"
        set-out cache-prefix "${BUILD_PREFIX}"

        BUILD_PREFIX="${BUILD_PREFIX}${RUST_CACHE_KEY}::"
        set-out cache-prefix-rust "$BUILD_PREFIX"

        set-out cache-key    "${BUILD_PREFIX}${BUILD_HASH}"
        set-out build-mode   "${BUILD_MODE}"
        set-env BUILD_MODE   "${BUILD_MODE}"

        set-out build-binary "$PWD/target/${BUILD_MODE}/rusty-cli"
        set-env BUILD_BINARY "$PWD/target/${BUILD_MODE}/rusty-cli"

    - name: restore build cache
      id: cache-restore
      uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: |
          ./target
          ./cargo-build
        key: ${{ steps.setup-env.outputs.cache-key }}
        restore-keys: |
          ${{ steps.setup-env.outputs.cache-prefix-rust }}
          ${{ steps.setup-env.outputs.cache-prefix }}

    - name: build
      id: cargo-build
      if: steps.cache-restore.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -u

        rsync -a ~/.cargo/ ./cargo-pre/

        cargo fetch

        if [[ $BUILD_MODE == release ]]; then
          cargo build --release
        else
          cargo build
          cargo test --no-run
        fi

        touch files.txt

        find ~/.cargo -type f -print0 \
        | while read -r -d '' fname; do
          rel=${fname#~/.cargo/}

          if [[ $fname -nt ./cargo-pre/$rel ]]; then
            echo "$rel" >> files.txt
          fi
        done

        wc -l files.txt
        rsync -a --files-from=files.txt ~/.cargo/ ./cargo-build/
        du -sh \
          ./target \
          ~/.cargo \
          ./cargo-pre \
          ./cargo-build

        rm -rf ~/.cargo
        mv ./cargo-pre ~/.cargo

    - name: add binary directory to $PATH
      id: update-path
      shell: bash
      run: |
        : "${BUILD_BINARY:?}"
        if [[ ! -e $BUILD_BINARY || ! -x $BUILD_BINARY ]]; then
          echo "ERROR: binary ($BUILD_BINARY) not found/not executable"
          exit 1
        fi

        BIN_DIR=${BUILD_BINARY%/*}
        PATH=${BIN_DIR}:${PATH}

        tmp=$(mktemp)
        if ! rusty-cli --help &>"$tmp"; then
          echo 'ERROR: `rusty-cli --help` returned non-zero'
          cat "$tmp"
          exit 1
        fi

        echo "$BIN_DIR" >> $GITHUB_PATH

    - name: update ~/.cargo contents
      id: cargo-restore
      shell: bash
      run: rsync -a ./cargo-build/ ~/.cargo/

    - name: save build cache
      id: build-cache-save
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: |
          ./target
          ./cargo-build
        key: ${{ steps.setup-env.outputs.cache-key }}
