name: compatibility tests

on:
  workflow_call: {}

defaults:
  run:
    shell: bash

jobs:
  build-matrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: matrix
        id: matrix
        run: |
          MATRIX=$(jq -c -r --null-input '
            . as $_

            | [
                {
                  openresty: "1.19.9.1",
                  openssl: "1.1.1n",
                  cli: [
                    "v0.28"
                  ]
                },
                {
                  openresty: "1.21.4.3",
                  openssl: "1.1.1w",
                  cli: [
                    "v0.29"
                  ]
                },
                {
                  openresty: "1.25.3.2",
                  openssl: "1.1.1w",
                  cli: [
                    "v0.29"
                  ]
                },
                {
                  openresty: "1.27.1.2",
                  openssl: "3.4.1",
                  cli: [
                    "v0.29",
                    "v0.30",
                    "v0.31",
                    "v0.32"
                  ]
                }
              ] as $RESTY_META

            | reduce (
                $RESTY_META[]
                | .openresty as $openresty
                | .openssl as $openssl
                | {
                    $openresty,
                    $openssl,
                    cli: .cli[]
                  }
              ) as { $openresty, $openssl, $cli }
              (
                {
                  label: [],
                  include: [],
                };

                .
                | "cli(\($cli)) - resty(\($openresty))" as $label
                | .label += [$label]
                | .include += [{
                    $label,
                    $openresty,
                    $openssl,
                    "resty-cli": $cli,
                  }]
              )
            '
          )

          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT
          {
            echo '# matrix'
            echo '```json'
            jq --indent 2 <<< "$MATRIX"
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

  compat:
    name: ${{ matrix.label }}
    runs-on: ubuntu-latest
    needs: [build-matrix]
    strategy:
      # don't cancel in-progress test if one matrix fails
      fail-fast: false

      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

    env:
      RESTY_CLI_COMPAT_VERSION: ${{ matrix.resty-cli }}
      RESTY_BUILD_OPTS: >
        --with-compat
        --with-pcre
        --with-pcre-jit
        --with-stream
        --with-threads
        --with-http_ssl_module
        --with-stream_ssl_module
        --with-stream_ssl_preread_module
      RESTY_OPENSSL_VERSION: ${{ matrix.openssl }}
      RESTY_VERSION: ${{ matrix.openresty }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: ./.github/actions/build

      - name: install deps
        id: deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gdb libpcre3
          gdb --version

      - name: set OpenResty prefix
        run: |
          echo OPENRESTY_PREFIX=${GITHUB_WORKSPACE}/openresty/${RESTY_VERSION:?} >> $GITHUB_ENV
          echo PERL5LIB=${GITHUB_WORKSPACE}/work/lib/cpanm/lib/perl5 >> $GITHUB_ENV

      - name: Store OpenResty build opts
        run: |
          > .resty-opts
          echo "${RESTY_BUILD_OPTS:?}"          >> .resty-opts
          echo "${RESTY_OPENSSL_VERSION:?}"     >> .resty-opts

      - name: cache OpenResty
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        id: cache-openresty
        with:
          path: |
            ${{ env.OPENRESTY_PREFIX }}
            work/
          key: v2::${{ runner.os }}-openresty-${{ matrix.openresty }}-${{ hashFiles('.resty-opts') }}

      - name: install OpenResty build deps
        if: steps.cache-openresty.outputs.cache-hit != 'true'
        id: openresty-deps
        run: |
          sudo apt-get install -y libpcre3-dev

      - name: setup OpenResty
        if: steps.cache-openresty.outputs.cache-hit != 'true'
        id: setup-openresty
        uses: thibaultcha/setup-openresty@3cf62bb9f63cca0c3e77e770d0313560d28b8023 # main
        with:
          version: ${{ matrix.openresty }}
          openssl-version: ${{ matrix.openssl }}
          test-nginx: true
          debug: true
          opt: ${{ env.RESTY_BUILD_OPTS }}

      - name: Cleanup OpenResty build artifacts
        if: steps.cache-openresty.outputs.cache-hit != 'true'
        run: |
          rm -rf \
            ./work/OpenResty \
            ./work/OpenSSL/test \
            ./work/OpenSSL/doc \
            ./work/OpenSSL/test \
            ./work/OpenSSL/demos \
            ./work/OpenSSL/fuzz \
            ./work/downloads \
          || true

      - name: add OpenResty bin dirs to PATH
        run: |
          echo ${OPENRESTY_PREFIX}/bin >> $GITHUB_PATH
          echo ${OPENRESTY_PREFIX}/luajit/bin >> $GITHUB_PATH
          echo ${OPENRESTY_PREFIX}/nginx/sbin >> $GITHUB_PATH

      - name: checkout resty-cli repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: openresty/resty-cli
          ref: ${{ matrix.resty-cli }}
          path: resty-cli

      - name: copy & patch files
        run: ./tests/setup-resty-cli.sh

      - name: debug (ldd nginx)
        run: |
          NGINX=$(realpath "$(type -p nginx)")
          echo "nginx is $NGINX"
          ldd "$NGINX"

      - name: debug (nginx -V <> rusty-cli -V <> resty -V)
        run: |
          split_args() {
            sed -r -e '/^configure arguments:.*/ s/ (--?)/\n\1/g'
          }

          echo "::group::nginx -V"
          nginx -V 2>&1 | split_args
          echo "::endgroup::"

          echo "::group::rusty-cli -V"
          rusty-cli -V 2>&1 | split_args
          echo "::endgroup::"

          echo "::group::resty -V"
          ./resty-cli/bin/resty -V 2>&1 | split_args
          echo "::endgroup::"

      - name: debug (rusty-cli w/ gdb)
        run: |
          rusty-cli \
             --gdb-opts="--nx -batch -ex 'b main' -ex run -ex bt -ex 'b lj_cf_io_method_write' -ex c -ex bt" \
             -e 'io.stderr:write("hello world!~~\n")'

      - name: prove
        run: prove -r t/

      - name: runner opts
        run: ./tests/runners.sh

      - name: nginx.conf generation
        run: ./tests/conf-generation.sh

      - name: lua script argv translation
        run: ./tests/lua-arg.sh

      - name: signal-handling
        run: ./tests/sigwinch.sh

      - name: nginx binary location
        run: ./tests/nginx-bin-search.sh
